= Static Caching

A Radiant Extension to do static file caching.

Then Apache (et. al.) can be used to serve the pages without hitting the ruby app at all.

= Installation

- Place in the vendor/extensions/static_caching
- Install "tricycle-rack-contrib" gem (hosted at gemcutter.org)

= Radiant Setup

If your static cache dir differs from "#{RAILS_ROOT}/public/radiant-cache", set
the STATIC_CACHE_DIR ruby variable in "config/initializers/static_caching.rb"

If you have any POSTed pages that should reset the cache, such as a 'Contact Us' form,
place any prefixes to ignore in the IGNORE_PREFIXES ruby variable in
"config/initializers/static_caching.rb", similar to above. For example, if your 
contact us form is POSTed to /contact then set the IGNORE_PREFIXES as such:

IGNORE_PREFIXES = ['/contact']


= Apache Setup

== Cache Location

The location needs to be accessible to Apache. The simplest solution is to put the entity cache in
a location already accessible to Apache, such as:
<code>/path/to/radiant/public/radiant-cache</code>

Alternatively you can make the default location accessible you
need to add a section like the following to your apache configuration:

  <Directory "/path/to/radiant/cache/entity">
    Order allow,deny
    Allow from all
  </Directory>

== Rewrite Rules

You need some apache config along the lines of this (note that <code>/radiant-cache</code> here matches <code>/public/radiant-cache</code> in "Cache Location" above - if these don't agree Radiant will write
a cache, but Apache will not use it):

  # This is only needed if not already present in you config/virtual host
  RewriteEngine On
  
  # Rewrite /path/to/page to cache/path/to/page if it exists (for paths already containing an extension
  # or no extension)
  RewriteCond %{REQUEST_METHOD} ^(GET|HEAD)$
  RewriteCond %{QUERY_STRING} ^$
  RewriteCond %{DOCUMENT_ROOT}/radiant-cache%{REQUEST_URI} -f
  RewriteRule . /radiant-cache%{REQUEST_URI} [P,L]

  # Rewrite /path/to/page/? (with or without trailing slash) to
  # cache/path/to/page.{whitelisted extension} if it exists
  RewriteCond %{REQUEST_METHOD} ^(GET|HEAD)$
  RewriteCond %{QUERY_STRING} ^$
  RewriteCond %{REQUEST_URI} ^(.+)/?$
  RewriteCond %{DOCUMENT_ROOT}/radiant-cache%1.(html|css|txt|js|csv|xml|pdf|xhtml) -f
    # %1 is match from last RewriteCond
  RewriteRule ^(.+)/?$ /radiant-cache$1.%1 [P,L]

  # Rewrite /path/to/page/? (with or without trailing slash) (or /) to
  # cache/path/to/page/index.html if it exists
  RewriteCond %{REQUEST_METHOD} ^(GET|HEAD)$
  RewriteCond %{QUERY_STRING} ^$
  RewriteCond %{REQUEST_URI} ^(.*)/?$
  RewriteCond %{DOCUMENT_ROOT}/radiant-cache%1/index.html -f
  RewriteRule ^(.*)/?$ /radiant-cache$1/index.html [proxy,last]
  
== If using Passenger

If you're using passenger and don't want it to spawn a Rails process just to serve cached content you need to add 
<code>RailsAutoDetect off</code> to the vhost defining your app and setup another vhost to be the passenger application server.
You can do this by binding the passenger vhost to a loopback address and proxying the requests

*OSX Note*: OS X only treats 127.0.0.1 as loopback, to add a host run <code>sudo ifconfig lo0 alias 127.0.10.10 up</code>

  # In the externally accessible vhost
  RailsAutoDetect off
  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} !-f
  RewriteRule . http://127.0.10.10%{REQUEST_URI} [P,QSA]
  
And in the other vhost:

  <VirtualHost 127.0.10.10:80>
    DocumentRoot /path/to/app
    # usual setup
  </VirtualHost>

= TODO

- Add proper caching of GET|HEAD with query string
- Cache "(application|text)/javascript"
- Make only cache on success error codes 2XX
